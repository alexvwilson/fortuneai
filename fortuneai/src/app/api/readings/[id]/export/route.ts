import { NextRequest, NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server";
import { getReadingById } from "@/lib/readings";
import jsPDF from "jspdf";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { id } = await params;
    const format = request.nextUrl.searchParams.get("format") as
      | "pdf"
      | "text"
      | "json";

    if (!["pdf", "text", "json"].includes(format)) {
      return NextResponse.json({ error: "Invalid format" }, { status: 400 });
    }

    const reading = await getReadingById(id, userId);
    if (!reading) {
      return NextResponse.json({ error: "Reading not found" }, { status: 404 });
    }

    switch (format) {
      case "pdf":
        return generatePDF(reading);
      case "text":
        return generateText(reading);
      case "json":
        return generateJSON(reading);
      default:
        return NextResponse.json({ error: "Invalid format" }, { status: 400 });
    }
  } catch (error) {
    console.error("Export error:", error);
    return NextResponse.json({ error: "Export failed" }, { status: 500 });
  }
}

function generatePDF(reading: {
  id: string;
  title: string | null;
  prompt: string;
  aiResponse: string;
  createdAt: Date;
}) {
  const doc = new jsPDF();

  // Add mystical theme styling
  doc.setFillColor(75, 0, 130); // Purple background
  doc.rect(0, 0, 210, 297, "F");

  // Add title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text(reading.title || "Fortune Reading", 20, 30);

  // Add content
  doc.setFontSize(12);
  doc.text("Your Question:", 20, 50);
  doc.text(reading.prompt, 20, 60);

  doc.text("Your Fortune Reading:", 20, 100);
  const splitResponse = doc.splitTextToSize(reading.aiResponse, 170);
  doc.text(splitResponse, 20, 110);

  const pdfBuffer = Buffer.from(doc.output("arraybuffer"));

  return new NextResponse(pdfBuffer, {
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": `attachment; filename="fortune-reading-${reading.id}.pdf"`,
    },
  });
}

function generateText(reading: {
  id: string;
  title: string | null;
  prompt: string;
  aiResponse: string;
  createdAt: Date;
}) {
  const textContent = `
FORTUNE READING
================

Title: ${reading.title || "Untitled Reading"}
Date: ${new Date(reading.createdAt).toLocaleDateString()}

Your Question:
${reading.prompt}

Your Fortune Reading:
${reading.aiResponse}

---
Generated by FortuneAI.com
  `.trim();

  return new NextResponse(textContent, {
    headers: {
      "Content-Type": "text/plain",
      "Content-Disposition": `attachment; filename="fortune-reading-${reading.id}.txt"`,
    },
  });
}

function generateJSON(reading: {
  id: string;
  title: string | null;
  prompt: string;
  aiResponse: string;
  tags: string[] | null;
  isFavorite: boolean;
  createdAt: Date;
}) {
  const jsonContent = {
    id: reading.id,
    title: reading.title,
    prompt: reading.prompt,
    aiResponse: reading.aiResponse,
    tags: reading.tags,
    isFavorite: reading.isFavorite,
    createdAt: reading.createdAt,
    exportedAt: new Date().toISOString(),
    source: "FortuneAI.com",
  };

  return new NextResponse(JSON.stringify(jsonContent, null, 2), {
    headers: {
      "Content-Type": "application/json",
      "Content-Disposition": `attachment; filename="fortune-reading-${reading.id}.json"`,
    },
  });
}
